@model GetApp.Data.Models.Exam
@{
    ViewBag.Title = "Details";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Exam</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="from-group">
        @Html.LabelFor(model => model.IndexNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("IndexNumber", (SelectList)ViewBag.studentIndexes, 0)
            @Html.ValidationMessageFor(model => model.IndexNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="from-group">
        @Html.LabelFor(model => model.SubjectId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("SubjectId", (SelectList)ViewBag.subjectId, 0)
            @Html.ValidationMessageFor(model => model.SubjectId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="from-group">
        @Html.LabelFor(model => model.Grade, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Grade, new { htmlAttributes = new { @class = "form-control", @id = "Grade" } })
            @Html.ValidationMessageFor(model => model.Grade, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="from-group">
        @Html.LabelFor(model => model.PassedExamDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PassedExamDate, new { htmlAttributes = new { @class = "form-control", @id = "PassedExamDate" } })
            @Html.ValidationMessageFor(model => model.PassedExamDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>

</div>

}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    setupConnection = (hubProxy) => {
        hubProxy.client.receiveExamUpdate = (updateObject) => {
            const statusDiv = document.getElementById("status");
            statusDiv.innerHTML = `Exam: ${updateObject.ExamId}: ${updateObject.Update}`;
        };
     };

    $(document).ready(() => {
        var hubProxy = $.connection.examHub;
        setupConnection(hubProxy);
        $.connection.hub.start();

        document.getElementById("submit").addEventListener("click",
            e => {
                const grade = document.getElementById("Grade").value;
                const passedExamDate = document.getElementById("PassedExamDate").value;
                const indexNumber = document.getElementById("IndexNumber").value;
                const subjectId = document.getElementById("SubjectId").value;

                hubProxy.server.getUpdateForExam({ grade, passedExamDate, indexNumber, subjectId });

                console.log("Dsds");
                 });
    });
</script>